priority -50

snippet /^import/ "Import declaration" r
import (
	"${1:package}"
)
endsnippet

snippet /^package/ "Package declaration" r
package ${1:main}
endsnippet

snippet /^main/ "Main function" r
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet /^hello/ "Hello World Program" r
package main

import (
	"fmt"
)

func main() {
	fmt.Println("Hello world!!!")${0}
}
endsnippet

snippet struct "Struct declaration" b
type ${1:Struct} struct {
	${0:${VISUAL}}
}
endsnippet

snippet interface "Interface declaration" b
type ${1:Interface} interface {
	${0:${VISUAL}}
}
endsnippet

snippet switch "Switch statement" b
switch ${1:expression}${1/(.+)/ /}{
case$0
}
endsnippet

snippet handler "HTTP handler" b
func ${1:handler}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {
	${0:${VISUAL}}
}
endsnippet

snippet json "JSON field"
\`json:"${1:displayName}"\`
endsnippet

snippet json "YAML field"
\`yaml:"${1:displayName}"\`
endsnippet

snippet errn "Basic error handling" b
if err != nil {
	${0:${VISUAL}}
}
endsnippet

snippet ife "If with inline error"
if err := ${1:condition}; err != nil {
	${0:${VISUAL}}
}
endsnippet

snippet ap "Append to slice"
${1:slice} = append($1, ${0:value})
endsnippet

snippet df "Defer func() { ... }"
defer func() {
	${0:${VISUAL}}
}()
endsnippet

snippet fpf "fmt.Printf(...)"
fmt.Printf("${1:${VISUAL}}", ${0})
endsnippet

snippet fpl "fmt.Println(...)"
fmt.Println(${1:${VISUAL}})
endsnippet

snippet fspf "fmt.Sprintf(...)"
fmt.Sprintf("${1:${VISUAL}}", ${0})
endsnippet
